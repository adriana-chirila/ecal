
.. _program_listing_file_contrib_ecalhdf5_include_ecalhdf5_eh5_writer.h:

Program Listing for File eh5_writer.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_contrib_ecalhdf5_include_ecalhdf5_eh5_writer.h>` (``contrib/ecalhdf5/include/ecalhdf5/eh5_writer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* ========================= eCAL LICENSE =================================
    *
    * Copyright (C) 2016 - 2019 Continental Corporation
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    *
    * ========================= eCAL LICENSE =================================
   */
   
   #pragma once
   
   #include <functional>
   #include <set>
   #include <string>
   #include <memory>
   
   #include <ecal/measurement/base/writer.h>
   #include <ecalhdf5/eh5_meas.h>
   
   namespace eCAL
   {
     namespace eh5
     {
         class Writer : public measurement::base::Writer
         {
         public:
           Writer() = default;
   
           Writer(const std::string& path) : measurement(path, eAccessType::CREATE) {}
   
           bool Open(const std::string& path) override { return measurement.Open(path, eAccessType::CREATE); }
   
           bool Close() override { return measurement.Close(); }
   
           bool IsOk() const override { return measurement.IsOk(); }
   
           size_t GetMaxSizePerFile() const override { return measurement.GetMaxSizePerFile(); }
   
           void SetMaxSizePerFile(size_t size) override { return measurement.SetMaxSizePerFile(size); }
   
           bool IsOneFilePerChannelEnabled() const override { return measurement.IsOneFilePerChannelEnabled(); }
   
           void SetOneFilePerChannelEnabled(bool enabled) override { return measurement.SetOneFilePerChannelEnabled(enabled); }
   
           void SetChannelDescription(const std::string& channel_name, const std::string& description) override { return measurement.SetChannelDescription(channel_name, description); }
   
           void SetChannelType(const std::string& channel_name, const std::string& type) override { return measurement.SetChannelType(channel_name, type); }
   
           void SetFileBaseName(const std::string& base_name) override { return measurement.SetFileBaseName(base_name); }
   
           bool AddEntryToFile(const void* data, const unsigned long long& size, const long long& snd_timestamp, const long long& rcv_timestamp, const std::string& channel_name, long long id, long long clock) override
           {
             return measurement.AddEntryToFile(data, size, snd_timestamp, rcv_timestamp, channel_name, id, clock);
           }
   
           private:
             HDF5Meas measurement;
   
         };
   
     }  // namespace eh5
   }  // namespace eCAL
