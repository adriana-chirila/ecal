name: Build Ubuntu 22.04

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-22.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt-get install ninja-build doxygen graphviz libcurl4-openssl-dev libprotobuf-dev libprotoc-dev protobuf-compiler libhdf5-dev qtbase5-dev libqwt-qt5-dev

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: CMake
      run: |
        export CC=/usr/bin/gcc-11
        export CXX=/usr/bin/g++-11
        mkdir "${{ runner.workspace }}/_build"
        cd "${{ runner.workspace }}/_build"
        cmake $GITHUB_WORKSPACE -G "Ninja" \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DHAS_HDF5=OFF \
        -DHAS_QT5=OFF \
        -DHAS_CURL=OFF \
        -DHAS_CAPNPROTO=OFF \
        -DBUILD_DOCS=OFF \
        -DBUILD_APPS=OFF \
        -DBUILD_SAMPLES=OFF \
        -DBUILD_TIME=OFF \
        -DBUILD_PY_BINDING=OFF \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_ECAL_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=OFF \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=OFF \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=OFF \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=OFF \
        -DECAL_THIRDPARTY_BUILD_TERMCOLOR=OFF \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF \
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON \
        -DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON \
        -DECAL_THIRDPARTY_BUILD_QWT=OFF \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_SYSCONFDIR=/etc \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
        -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu
        sudo mkdir /etc/ecal
        sudo cp "$GITHUB_WORKSPACE/ecal/core/cfg/ecal.ini" /etc/ecal
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/_build

    # Create Python Wheels
    # The strang-looking double-cmake is an ugly workaround to force CMake to
    # re-find Python, after we have changed the venv from the outside. The
    # alternative would be to clean everything, which would cause an unnecessary
    # rebuild of eCAL for each python Version.
    - name: Build Python 3.10 Wheel
      run: |
        sudo apt-get -y install python3.10-dev python3.10-venv
        mkdir ".venv_310"
        python3.10 -m venv ".venv_310"
        source ".venv_310/bin/activate"
        pip install wheel setuptools
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=FIRST
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: bash
      working-directory: ${{ runner.workspace }}/_build

    - name: Run Tests
      run: ctest -V
      working-directory: ${{ runner.workspace }}/_build

    - name: Pack
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/_build

    - name: Upload Debian
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-debian
        path: ${{ runner.workspace }}/_build/_deploy/*.deb

    - name: Upload Python Wheel
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-python-wheel
        path: ${{ runner.workspace }}/_build/_deploy/*.whl